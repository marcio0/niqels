{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Catego",
				"CategoryResource"
			],
			[
				"Test",
				"TestCase"
			],
			[
				"Category",
				"CategoryResourceTest"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "import datetime\nimport calendar\n\nfrom tastypie.constants import ALL, ALL_WITH_RELATIONS\nfrom tastypie.resources import ModelResource, Resource\nfrom tastypie.validation import FormValidation, CleanedDataFormValidation\nfrom tastypie import fields\nfrom tastypie import http\nfrom tastypie.authentication import SessionAuthentication, BasicAuthentication, MultiAuthentication\nfrom tastypie.authorization import Authorization\nfrom tastypie.utils import trailing_slash\nfrom tastypie.exceptions import BadRequest\nfrom django.conf.urls import url\nfrom django.core.urlresolvers import NoReverseMatch\n\nfrom expenses.models import Entry, Category\nfrom expenses.forms import CategoryForm\nfrom access.forms import UserCreationForm\nfrom access.models import User\nfrom api.authorization import UserObjectsOnlyAuthorization\nfrom api.validation import EntryApiForm\nfrom expenses import random_color\nfrom expenses.calculator import AverageCalculator\n\nfrom babel.numbers import parse_decimal\n\n\nclass ReturnData(object):\n    pass\n\n\nclass BalanceResource(Resource):\n    class Meta:\n        object_class = ReturnData\n        include_resource_uri = False\n        authentication = MultiAuthentication(SessionAuthentication(), BasicAuthentication())\n        list_allowed_methods = ['get']\n        detail_allowed_methods = ['get']\n        resource_name = 'data/balance'\n\n    def get_month_filter(self, GET=None):\n        if not GET:\n            return datetime.date.today()\n\n        date = GET.get('date', None)\n        date = datetime.datetime.strptime(date, '%Y-%m-%d').date()\n\n        #last_day = calendar.monthrange(date.year, date.month)[1]\n        #date = date.replace(day=last_day)\n\n        return date\n\n    def obj_get(self, bundle, **kwargs):\n        try:\n            date = self.get_month_filter(bundle.request.GET)\n        except ValueError:\n            raise BadRequest('Invalid date filter')\n        \n        obj = ReturnData()\n        obj.average_balance = AverageCalculator(\n            user=bundle.request.user,\n            start_date=date,\n            qty_months=3).calculate()\n\n        return obj\n\n    def full_dehydrate(self, bundle, for_list=False):\n        bundle = super(BalanceResource, self).full_dehydrate(bundle, for_list)\n        bundle.data['balance'] = bundle.obj.average_balance\n        return bundle\n\n    def dispatch_list(self, request, **kwargs):\n        return self.dispatch_detail(request, **kwargs)\n\n\nclass UserResource(ModelResource):\n    class Meta:\n        queryset = User.objects.all()\n        fields = ['email', 'name']\n        authentication = MultiAuthentication(SessionAuthentication(), BasicAuthentication())\n        authorization = Authorization()\n        list_allowed_methods = []\n        detail_allowed_methods = ['get']\n        include_resource_uri = False\n\n    def dispatch_list(self, request, **kwargs):\n        return self.dispatch_detail(request, **kwargs)\n\n    def obj_get(self, bundle, **kwargs):\n        '''\n        Always returns the logged in user.\n        '''\n        return bundle.request.user\n\n    def get_resource_uri(self, bundle_or_obj=None, url_name='api_dispatch_list'):\n        bundle_or_obj = None\n        try:\n            return self._build_reverse_url(url_name, kwargs=self.resource_uri_kwargs(bundle_or_obj))\n        except NoReverseMatch:\n            return ''\n\n\nclass CategoryResource(ModelResource):\n    def obj_create(self, bundle, **kwargs):\n        # TODO: unnittest this\n        return super(CategoryResource, self).obj_create(bundle, user=bundle.request.user)\n\n    class Meta:\n        queryset = Category.objects.all()\n        authentication = MultiAuthentication(SessionAuthentication(), BasicAuthentication())\n        authorization = UserObjectsOnlyAuthorization()\n        validation = FormValidation(form_class=CategoryForm)\n        list_allowed_methods = ['get', 'post']\n        detail_allowed_methods = ['get', 'put', 'delete']\n        filtering = {\n            'name': ALL\n        }\n\n    def delete_detail(self, *args, **kwargs):\n        return http.HttpNotImplemented()\n\n\nclass TransactionResource(ModelResource):\n    category = fields.ForeignKey(CategoryResource, 'category', full=True)\n\n    class Meta:\n        queryset = Entry.objects.all()\n        always_return_data = True\n        excludes = ['last_edited_time']\n        authentication = MultiAuthentication(SessionAuthentication(), BasicAuthentication())\n        authorization = UserObjectsOnlyAuthorization()\n        validation = FormValidation(form_class=EntryApiForm)\n        list_allowed_methods = ['get', 'post']\n        detail_allowed_methods = ['get', 'put', 'delete']\n        filtering = {\n            'date': ALL\n        }\n\n\n    def obj_create(self, bundle, **kwargs):\n        return super(TransactionResource, self).obj_create(bundle, user=bundle.request.user)\n\n    def put_detail(self, *args, **kwargs):\n        return http.HttpNotImplemented()\n\n    def hydrate_value(self, bundle):\n        value = bundle.data.get('value', None)\n\n        if value:\n            bundle.data['value'] = parse_decimal(value, locale=bundle.request.locale)\n\n        return bundle\n\n    def hydrate_category(self, bundle):\n        # TODO: unnittest this\n        category_name = bundle.data.get('category', None)\n\n        if not category_name:\n            bundle.data['category'] = category_name\n            return bundle\n\n        category_name = category_name.strip()\n\n        try:\n            category = Category.objects.get(\n                name=category_name,\n                user=bundle.request.user\n            )\n        except Category.DoesNotExist:\n            category = Category(\n                name=category_name,\n                user=bundle.request.user,\n                color=random_color()\n            )\n            category.save()\n\n        bundle.data['category'] = category\n\n        return bundle\n\n    #def dehydrate_category(self, bundle):\n    #    return bundle.obj.category.name\n\n",
			"file": "api/resources.py",
			"file_size": 5901,
			"file_write_time": 130160882602865713,
			"settings":
			{
				"buffer_size": 5901,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "import mock\n\nfrom tastypie.test import ResourceTestCase\nfrom django.test import TestCase\n\nfrom access.models import User\nfrom expenses.models import Category\nfrom api.resources import CategoryResource\n\n\nclass CategoryResourceUnitTest(TestCase):\n    def test_obj_create_owned_by_request_user(self):\n        '''\n        Assert the created object belongs to the user.\n        '''\n        resource = CategoryResource()\n        bundle = mock.Mock()\n        bundle.request.user = User()\n        obj = resource.obj_create(bundle)\n\n\nclass CategoryResourceInterfaceTest(ResourceTestCase):\n    fixtures = ['CategoryResourceTest']\n\n    def setUp(self):\n        super(CategoryResourceInterfaceTest, self).setUp()\n\n        # Create a user.\n        self.email = 'user@example.com'\n        self.password = 'password'\n        self.user = User.objects.create_user(self.email, self.password)\n\n        self.category = Category.objects.get(name=\"Groceries\")\n\n        # We also build a detail URI, since we will be using it all over.\n        # DRY, baby. DRY.\n        self.detail_url = '/api/v1/category/{0}'.format(self.category.pk)\n\n        # The data we'll send on POST requests. Again, because we'll use it\n        # frequently (enough)   .\n        self.post_data = {\n            'color': '#fefefe',\n            'name': 'new'\n        }\n\n    def get_credentials(self):\n        '''\n        Get the credentials for basic http authentication.\n        '''\n        return self.create_basic(username=self.email, password=self.password)\n\n    # General tests.\n    def test_basic_auth_ok(self):\n        '''\n        Testing auth with basic HTTP authentication.\n        '''\n        resp = self.api_client.get('/api/v1/category/', format='json', authentication=self.get_credentials())\n        self.assertValidJSONResponse(resp)\n\n    def test_session_auth_ok(self):\n        '''\n        Testing auth with django's session authentication.\n        User is alread logged in, sho theres no need for auth data on requisition.\n        '''\n        self.assertTrue(self.api_client.client.login(email=self.email, password=self.password))\n        resp = self.api_client.get('/api/v1/category/', format='json')\n        self.assertValidJSONResponse(resp)\n\n    # List tests: GET.\n    def test_get_list_unauthorzied(self):\n        '''\n        Must be authenticated to GET a list.\n        '''\n        self.assertHttpUnauthorized(self.api_client.get('/api/v1/category/', format='json'))\n\n    def test_get_list(self):\n        '''\n        GET to a list.\n        Must only return objects related to the user.\n        '''\n        resp = self.api_client.get('/api/v1/category/', format='json', authentication=self.get_credentials())\n        self.assertValidJSONResponse(resp)\n\n        # Scope out the data for correctness.\n        self.assertEqual(len(self.deserialize(resp)['objects']), 2)\n\n        # Here, we're checking an entire structure for the expected data.\n        self.assertEqual(self.deserialize(resp)['objects'][0], {\n            u'id': self.category.pk,\n            u'name': self.category.name,\n            u'color': self.category.color,\n            u'resource_uri': u'/api/v1/category/%d' % self.category.id\n        })\n\n    # List tests: POST\n    def test_post_list_unauthorized(self):\n        '''\n        Must be authenticated to POST a category.\n        '''\n        self.assertHttpUnauthorized(self.api_client.post('/api/v1/category/', format='json'))\n\n    def test_post_list(self):\n        '''\n        A valid post to list endpoint.\n        '''\n        # Check how many are there first.\n        self.assertEqual(Category.objects.filter(user=self.user).count(), 2)\n\n        self.assertHttpCreated(self.api_client.post('/api/v1/category/', format='json', data=self.post_data, authentication=self.get_credentials()))\n\n        # Verify a new one has been added.\n        self.assertEqual(Category.objects.filter(user=self.user).count(), 3)\n\n        # TODO increment this, check values\n\n    def test_post_list_missing_name(self):\n        '''\n        Invalid post; a name is required. Must return bad request.\n        '''\n        # Check how many are there first.\n        self.assertEqual(Category.objects.filter(user=self.user).count(), 2)\n\n        data = self.post_data.copy()\n        del data['name']\n\n        self.assertHttpBadRequest(self.api_client.post('/api/v1/category/', format='json', data=data, authentication=self.get_credentials()))\n\n        # Verify a new one has been added.\n        self.assertEqual(Category.objects.filter(user=self.user).count(), 2)\n\n    def test_put_list_not_allowed(self):\n        '''\n        Cannot PUT to a list.\n        '''\n        self.assertHttpMethodNotAllowed(self.api_client.put('/api/v1/category/', format='json', authentication=self.get_credentials()))\n\n    # List tests: DELETE\n    def test_delete_list_unauthorzied(self):\n        '''\n        Cannot DELETE to a list.\n        '''\n        self.assertHttpMethodNotAllowed(self.api_client.delete('/api/v1/category/', format='json', authentication=self.get_credentials()))\n\n\n    # Detail tests: GET.\n    def test_only_own_objects(self):\n        '''\n        Can only retrieve own objects.\n        '''\n        self.assertHttpNotFound(self.api_client.get('/api/v1/category/3', format='json', authentication=self.get_credentials()))\n\n    def test_get_detail_unauthorized(self):\n        '''\n        Must be authenticated to GET a category.\n        '''\n        self.assertHttpUnauthorized(self.api_client.get(self.detail_url, format='json'))\n\n    def test_get_detail(self):\n        '''\n        Retrieving a category.\n        '''\n        resp = self.api_client.get(self.detail_url, format='json', authentication=self.get_credentials())\n        self.assertValidJSONResponse(resp)\n\n        # We use ``assertKeys`` here to just verify the keys, not all the data.\n        self.assertKeys(self.deserialize(resp), ['name', 'color', 'id', 'resource_uri'])\n        self.assertEqual(self.deserialize(resp)['name'], 'Groceries')\n\n    # Detail tests: POST\n    def test_post_detail_not_allowed(self):\n        '''\n        Cannot POST to detail.\n        '''\n        self.assertHttpMethodNotAllowed(self.api_client.post(self.detail_url, format='json', authentication=self.get_credentials()))\n\n    # Detail tests: DELETE\n    def test_delete_detail_unauthorized(self):\n        '''\n        Must be authenticated to DELETE a detail.\n        '''\n        self.assertHttpUnauthorized(self.api_client.delete('/api/v1/category/1/', format='json'))\n\n    def test_delete_detail_not_implemented(self):\n        '''\n        Cannot DELETE a category for now.\n        Resource accepts the DELETE but returns a NotImplemented.\n        '''\n        self.assertHttpNotImplemented(self.api_client.delete('/api/v1/category/1/', format='json', authentication=self.get_credentials()))\n\n    # Detail tests: PUT\n    def test_put_detail_unauthenticated(self):\n        '''\n        Must be authenticated.\n        '''\n        self.assertHttpUnauthorized(self.api_client.put(self.detail_url, format='json', data={}))\n\n    def test_put_detail(self):\n        '''\n        Sending a successful PUT to a detail endpoint.\n        '''\n        # Grab the current data & modify it slightly.\n        original_data = self.deserialize(self.api_client.get(self.detail_url, format='json', authentication=self.get_credentials()))\n        new_data = original_data.copy()\n        new_data['name'] = 'new name'\n        new_data['color'] = '#000'\n\n        self.assertHttpAccepted(self.api_client.put(self.detail_url, format='json', data=new_data, authentication=self.get_credentials()))\n\n        # Make sure the count hasn't changed & we did an update.\n        # Check for updated data.\n        updated = Category.objects.get(pk=self.category.id)\n        self.assertEqual(updated.name, 'new name')\n        self.assertEqual(updated.color, '#000')\n\n    def test_put_detail_missing_name(self):\n        '''\n        Name is required, must (should) return bad request.\n        Object is not changed.\n        '''\n        # Grab the current data & modify it slightly.\n        original_data = self.deserialize(self.api_client.get(self.detail_url, format='json', authentication=self.get_credentials()))\n        new_data = original_data.copy()\n        del new_data['name']\n\n        resp = self.api_client.put(self.detail_url, format='json', data=new_data, authentication=self.get_credentials())\n        #self.assertHttpBadRequest(resp)\n        self.assertHttpAccepted(resp)  # I think this is wrong\n\n        # Make sure the count hasn't changed & we did an update.\n        # Check for updated data.\n        updated = Category.objects.get(pk=self.category.id)\n        self.assertEqual(updated.name, original_data['name'])\n        self.assertEqual(updated.color, original_data['color'])\n",
			"file": "api/tests/test_category_resource.py",
			"file_size": 8751,
			"file_write_time": 130161602787319029,
			"settings":
			{
				"buffer_size": 8754,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "// While you can edit this file, it's best to put your changes in\n// \"User/Preferences.sublime-settings\", which overrides the settings in here.\n//\n// Settings may also be placed in file type specific options files, for\n// example, in Packages/Python/Python.sublime-settings for python files.\n{\n    // Sets the colors used within the text area\n    \"color_scheme\": \"Packages/Color Scheme - Default/Monokai.tmTheme\",\n\n    // Note that the font_face and font_size are overriden in the platform\n    // specific settings file, for example, \"Preferences (Linux).sublime-settings\".\n    // Because of this, setting them here will have no effect: you must set them\n    // in your User File Preferences.\n    \"font_face\": \"\",\n    \"font_size\": 10,\n\n    // Valid options are \"no_bold\", \"no_italic\", \"no_antialias\", \"gray_antialias\",\n    // \"subpixel_antialias\", \"no_round\" (OS X only) and \"directwrite\" (Windows only)\n    \"font_options\": [],\n\n    // Characters that are considered to separate words\n    \"word_separators\": \"./\\\\()\\\"'-:,.;<>~!@#$%^&*|+=[]{}`~?\",\n\n    // Set to false to prevent line numbers being drawn in the gutter\n    \"line_numbers\": true,\n\n    // Set to false to hide the gutter altogether\n    \"gutter\": true,\n\n    // Spacing between the gutter and the text\n    \"margin\": 4,\n\n    // Fold buttons are the triangles shown in the gutter to fold regions of text\n    \"fold_buttons\": true,\n\n    // Hides the fold buttons unless the mouse is over the gutter\n    \"fade_fold_buttons\": true,\n\n    // Columns in which to display vertical rulers\n    \"rulers\": [],\n\n    // Set to true to turn spell checking on by default\n    \"spell_check\": false,\n\n    // The number of spaces a tab is considered equal to\n    \"tab_size\": 4,\n\n    // Set to true to insert spaces when tab is pressed\n    \"translate_tabs_to_spaces\": true,\n\n    // If translate_tabs_to_spaces  is true, use_tab_stops will make tab and\n    // backspace insert/delete up to the next tabstop\n    \"use_tab_stops\": true,\n\n    // Set to false to disable detection of tabs vs. spaces on load\n    \"detect_indentation\": true,\n\n    // Calculates indentation automatically when pressing enter\n    \"auto_indent\": true,\n\n    // Makes auto indent a little smarter, e.g., by indenting the next line\n    // after an if statement in C. Requires auto_indent to be enabled.\n    \"smart_indent\": true,\n\n    // Adds whitespace up to the first open bracket when indenting. Requires\n    // auto_indent to be enabled.\n    \"indent_to_bracket\": false,\n\n    // Trims white space added by auto_indent when moving the caret off the\n    // line.\n    \"trim_automatic_white_space\": true,\n\n    // Disables horizontal scrolling if enabled.\n    // May be set to true, false, or \"auto\", where it will be disabled for\n    // source code, and otherwise enabled.\n    \"word_wrap\": \"auto\",\n\n    // Set to a value other than 0 to force wrapping at that column rather than the\n    // window width\n    \"wrap_width\": 0,\n\n    // Set to false to prevent word wrapped lines from being indented to the same\n    // level\n    \"indent_subsequent_lines\": true,\n\n    // Draws text centered in the window rather than left aligned\n    \"draw_centered\": false,\n\n    // Controls auto pairing of quotes, brackets etc\n    \"auto_match_enabled\": true,\n\n    // Word list to use for spell checking\n    \"dictionary\": \"Packages/Language - English/en_US.dic\",\n\n    // Set to true to draw a border around the visible rectangle on the minimap.\n    // The color of the border will be determined by the \"minimapBorder\" key in\n    // the color scheme\n    \"draw_minimap_border\": false,\n\n    // If enabled, will highlight any line with a caret\n    \"highlight_line\": false,\n\n    // Valid values are \"smooth\", \"phase\", \"blink\", \"wide\" and \"solid\".\n    \"caret_style\": \"smooth\",\n\n    // Set to false to disable underlining the brackets surrounding the caret\n    \"match_brackets\": true,\n\n    // Set to false if you'd rather only highlight the brackets when the caret is\n    // next to one\n    \"match_brackets_content\": true,\n\n    // Set to false to not highlight square brackets. This only takes effect if\n    // match_brackets is true\n    \"match_brackets_square\": true,\n\n    // Set to false to not highlight curly brackets. This only takes effect if\n    // match_brackets is true\n    \"match_brackets_braces\": true,\n\n    // Set to false to not highlight angle brackets. This only takes effect if\n    // match_brackets is true\n    \"match_brackets_angle\": false,\n\n    // Enable visualization of the matching tag in HTML and XML\n    \"match_tags\": true,\n\n    // Highlights other occurrences of the currently selected text\n    \"match_selection\": true,\n\n    // Additional spacing at the top of each line, in pixels\n    \"line_padding_top\": 0,\n\n    // Additional spacing at the bottom of each line, in pixels\n    \"line_padding_bottom\": 0,\n\n    // Set to false to disable scrolling past the end of the buffer.\n    // On OS X, this value is overridden in the platform specific settings, so\n    // you'll need to place this line in your user settings to override it.\n    \"scroll_past_end\": true,\n\n    // This controls what happens when pressing up or down when on the first\n    // or last line.\n    // On OS X, this value is overridden in the platform specific settings, so\n    // you'll need to place this line in your user settings to override it.\n    \"move_to_limit_on_up_down\": false,\n\n    // Set to \"none\" to turn off drawing white space, \"selection\" to draw only the\n    // white space within the selection, and \"all\" to draw all white space\n    \"draw_white_space\": \"selection\",\n\n    // Set to false to turn off the indentation guides.\n    // The color and width of the indent guides may be customized by editing\n    // the corresponding .tmTheme file, and specifying the colors \"guide\",\n    // \"activeGuide\" and \"stackGuide\"\n    \"draw_indent_guides\": true,\n\n    // Controls how the indent guides are drawn, valid options are\n    // \"draw_normal\" and \"draw_active\". draw_active will draw the indent\n    // guides containing the caret in a different color.\n    \"indent_guide_options\": [\"draw_normal\"],\n\n    // Set to true to removing trailing white space on save\n    \"trim_trailing_white_space_on_save\": false,\n\n    // Set to true to ensure the last line of the file ends in a newline\n    // character when saving\n    \"ensure_newline_at_eof_on_save\": false,\n\n    // Set to true to automatically save files when switching to a different file\n    // or application\n    \"save_on_focus_lost\": false,\n\n    // The encoding to use when the encoding can't be determined automatically.\n    // ASCII, UTF-8 and UTF-16 encodings will be automatically detected.\n    \"fallback_encoding\": \"Western (Windows 1252)\",\n\n    // Encoding used when saving new files, and files opened with an undefined\n    // encoding (e.g., plain ascii files). If a file is opened with a specific\n    // encoding (either detected or given explicitly), this setting will be\n    // ignored, and the file will be saved with the encoding it was opened\n    // with.\n    \"default_encoding\": \"UTF-8\",\n\n    // Files containing null bytes are opened as hexadecimal by default\n    \"enable_hexadecimal_encoding\": true,\n\n    // Determines what character(s) are used to terminate each line in new files.\n    // Valid values are 'system' (whatever the OS uses), 'windows' (CRLF) and\n    // 'unix' (LF only).\n    \"default_line_ending\": \"system\",\n\n    // When enabled, pressing tab will insert the best matching completion.\n    // When disabled, tab will only trigger snippets or insert a tab.\n    // Shift+tab can be used to insert an explicit tab when tab_completion is\n    // enabled.\n    \"tab_completion\": true,\n\n    // Enable auto complete to be triggered automatically when typing.\n    \"auto_complete\": true,\n\n    // The maximum file size where auto complete will be automatically triggered.\n    \"auto_complete_size_limit\": 4194304,\n\n    // The delay, in ms, before the auto complete window is shown after typing\n    \"auto_complete_delay\": 50,\n\n    // Controls what scopes auto complete will be triggered in\n    \"auto_complete_selector\": \"source - comment\",\n\n    // Additional situations to trigger auto complete\n    \"auto_complete_triggers\": [ {\"selector\": \"text.html\", \"characters\": \"<\"} ],\n\n    // By default, auto complete will commit the current completion on enter.\n    // This setting can be used to make it complete on tab instead.\n    // Completing on tab is generally a superior option, as it removes\n    // ambiguity between committing the completion and inserting a newline.\n    \"auto_complete_commit_on_tab\": false,\n\n    // Controls if auto complete is shown when snippet fields are active.\n    // Only relevant if auto_complete_commit_on_tab is true.\n    \"auto_complete_with_fields\": false,\n\n    // By default, shift+tab will only unindent if the selection spans\n    // multiple lines. When pressing shift+tab at other times, it'll insert a\n    // tab character - this allows tabs to be inserted when tab_completion is\n    // enabled. Set this to true to make shift+tab always unindent, instead of\n    // inserting tabs.\n    \"shift_tab_unindent\": false,\n\n    // If true, the selected text will be copied into the find panel when it's\n    // shown.\n    // On OS X, this value is overridden in the platform specific settings, so\n    // you'll need to place this line in your user settings to override it.\n    \"find_selected_text\": true,\n\n    // When drag_text is enabled, clicking on selected text will begin a\n    // drag-drop operation\n    \"drag_text\": true,\n\n    //\n    // User Interface Settings\n    //\n\n    // The theme controls the look of Sublime Text's UI (buttons, tabs, scroll bars, etc)\n    \"theme\": \"Default.sublime-theme\",\n\n    // Set to 0 to disable smooth scrolling. Set to a value between 0 and 1 to\n    // scroll slower, or set to larger than 1 to scroll faster\n    \"scroll_speed\": 1.0,\n\n    // Controls side bar animation when expanding or collapsing folders\n    \"tree_animation_enabled\": true,\n\n    // Makes tabs with modified files more visible\n    \"highlight_modified_tabs\": false,\n\n    \"show_tab_close_buttons\": true,\n\n    // Show folders in the side bar in bold\n    \"bold_folder_labels\": false,\n\n    // OS X 10.7 only: Set to true to disable Lion style full screen support.\n    // Sublime Text must be restarted for this to take effect.\n    \"use_simple_full_screen\": false,\n\n    // Valid values are \"system\", \"enabled\" and \"disabled\"\n    \"overlay_scroll_bars\": \"system\",\n\n    //\n    // Application Behavior Settings\n    //\n\n    // Exiting the application with hot_exit enabled will cause it to close\n    // immediately without prompting. Unsaved modifications and open files will\n    // be preserved and restored when next starting.\n    //\n    // Closing a window with an associated project will also close the window\n    // without prompting, preserving unsaved changes in the workspace file\n    // alongside the project.\n    \"hot_exit\": true,\n\n    // remember_open_files makes the application start up with the last set of\n    // open files. Changing this to false will have no effect if hot_exit is\n    // true\n    \"remember_open_files\": true,\n\n    // OS X only: When files are opened from finder, or by dragging onto the\n    // dock icon, this controls if a new window is created or not.\n    \"open_files_in_new_window\": true,\n\n    // OS X only: This controls if an empty window is created at startup or not.\n    \"create_window_at_startup\": true,\n\n    // Set to true to close windows as soon as the last file is closed, unless\n    // there's a folder open within the window. This is always enabled on OS X,\n    // changing it here won't modify the behavior.\n    \"close_windows_when_empty\": false,\n\n    // Show the full path to files in the title bar.\n    // On OS X, this value is overridden in the platform specific settings, so\n    // you'll need to place this line in your user settings to override it.\n    \"show_full_path\": true,\n\n    // Shows the Build Results panel when building. If set to false, the Build\n    // Results can be shown via the Tools/Build Results menu.\n    \"show_panel_on_build\": true,\n\n    // Preview file contents when clicking on a file in the side bar. Double\n    // clicking or editing the preview will open the file and assign it a tab.\n    \"preview_on_click\": true,\n\n    // folder_exclude_patterns and file_exclude_patterns control which files\n    // are listed in folders on the side bar. These can also be set on a per-\n    // project basis.\n    \"folder_exclude_patterns\": [\".svn\", \".git\", \".hg\", \"CVS\"],\n    \"file_exclude_patterns\": [\"*.pyc\", \"*.pyo\", \"*.exe\", \"*.dll\", \"*.obj\",\"*.o\", \"*.a\", \"*.lib\", \"*.so\", \"*.dylib\", \"*.ncb\", \"*.sdf\", \"*.suo\", \"*.pdb\", \"*.idb\", \".DS_Store\", \"*.class\", \"*.psd\", \"*.db\"],\n    // These files will still show up in the side bar, but won't be included in\n    // Goto Anything or Find in Files\n    \"binary_file_patterns\": [\"*.jpg\", \"*.jpeg\", \"*.png\", \"*.gif\", \"*.ttf\", \"*.tga\", \"*.dds\", \"*.ico\", \"*.eot\", \"*.pdf\", \"*.swf\", \"*.jar\", \"*.zip\"]\n\n    // List any packages to ignore here. When removing entries from this list,\n    // a restart may be required if the package contains plugins.\n    //\"ignored_packages\": [\"Vintage\"]\n}\n",
			"file": "/C/Users/Marcio/AppData/Roaming/Sublime Text 2/Packages/Default/Preferences.sublime-settings",
			"file_size": 13149,
			"file_write_time": 130161601563755842,
			"settings":
			{
				"buffer_size": 13150,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 288.0,
		"selected_items":
		[
			[
				":w",
				":w - Save"
			],
			[
				"Snippet: cl",
				"Snippet: New Class"
			],
			[
				":q",
				"Set Syntax: SQL"
			]
		],
		"width": 392.0
	},
	"console":
	{
		"height": 0.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Z/workspace/expenses/expenses/static/js/controllers.js",
		"/Z/workspace/expenses/expenses/api/tests/test_balance_resource.py",
		"/C/Users/Marcio/AppData/Roaming/Sublime Text 2/Packages/Default/Preferences.sublime-settings"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"CategoryResourceTest",
			"ident",
			"arg",
			"removed",
			"ignor"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"CategoryResourceInterfaceTest"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "api/resources.py",
					"settings":
					{
						"buffer_size": 5901,
						"regions":
						{
						},
						"selection":
						[
							[
								5900,
								5900
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1400.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "api/tests/test_category_resource.py",
					"settings":
					{
						"buffer_size": 8754,
						"regions":
						{
							"bookmark_a":
							{
								"flags": 144,
								"regions":
								[
									[
										523,
										523
									]
								]
							}
						},
						"selection":
						[
							[
								1222,
								1222
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 270.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/C/Users/Marcio/AppData/Roaming/Sublime Text 2/Packages/Default/Preferences.sublime-settings",
					"settings":
					{
						"buffer_size": 13150,
						"regions":
						{
						},
						"selection":
						[
							[
								1849,
								1849
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 11.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 34.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"catego",
				"api/tests/test_category_resource.py"
			],
			[
				"test_b",
				"api/tests/test_balance_resource.py"
			],
			[
				"res",
				"api/resources.py"
			],
			[
				"contro",
				"static/js/controllers.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 306.0,
	"status_bar_visible": true
}
